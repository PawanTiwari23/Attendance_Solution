/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

//import com.sun.jdi.connect.spi.Connection;
import dao.ConnectionProvider;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;

import java.awt.Color;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import utility.BDUtility;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import net.glxn.qrgen.image.ImageType;
//import net.glxn.qrgen.core.scheme.VCard;
//import net.glxn.qrgen.javase.QRCode; // ✅ This is correct

//import net.glxn.qrgen.javase.QRCode;  // ✅ Correct import
import net.glxn.qrgen.image.ImageType;

import java.awt.Image;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;


 
import com.google.gson.Gson;
import static com.google.gson.internal.bind.util.ISO8601Utils.format;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import javax.swing.table.TableModel;
import java.util.Map;
import java.util.HashMap;
import javax.imageio.ImageIO;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.awt.Image;
import java.io.File;
import static java.lang.String.format;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import static java.text.MessageFormat.format;
import javax.swing.ImageIcon;
//import net.glxn.qrgen.javase.QRCode;
import net.glxn.qrgen.QRCode; // ✅ correct
//import net.glxn.qrgen.vcard.VCard;


import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import javax.swing.*;
import java.io.*;
import java.nio.file.FileSystems;
import java.nio.file.Path;









/**
 *
 * @author PAWAN
 */
public class GenerateQr extends javax.swing.JFrame {

    /**
     * Creates new form GenerateQr
     */
    public GenerateQr() {
        initComponents();
         BDUtility.setImage(this, "images/abc1.jpg", 1268, 560);//1268,560
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.BLACK));
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Exitbtn = new javax.swing.JButton();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        lblImage = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        btnSaveQr = new javax.swing.JButton();
        savaAtQr = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1226, 503));
        setMinimumSize(new java.awt.Dimension(1226, 503));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1226, 573));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("           Generate Qr User");
        jLabel1.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        Exitbtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Exitbtn.setForeground(new java.awt.Color(255, 102, 255));
        Exitbtn.setText("X");
        Exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitbtnActionPerformed(evt);
            }
        });

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Name", "Gender", "Email", "Contactl", "Address", "State", "Country", "Registration Id"
            }
        ));
        userTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(userTable);

        btnSaveQr.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSaveQr.setText("Save Qr");
        btnSaveQr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveQrActionPerformed(evt);
            }
        });

        savaAtQr.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        savaAtQr.setText("Save At");
        savaAtQr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savaAtQrActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(318, 318, 318)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 825, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(btnSaveQr, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(savaAtQr, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(109, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Exitbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(95, 95, 95))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Exitbtn)
                        .addGap(19, 19, 19)
                        .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(savaAtQr, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSaveQr, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ExitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitbtnActionPerformed
        // TODO add your handling code here:
        // System.exit(0);//Exit the page
        this.dispose(); // Exit the page
    }//GEN-LAST:event_ExitbtnActionPerformed

    private void savaAtQrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savaAtQrActionPerformed
        // TODO add your handling code here:
        
        try {
            if(out== null){
                JOptionPane.showMessageDialog(this, "No QR code Generated");
                return;
            }
           //
            //fileChooser.setDialogTitle("Save QR Code");
            JFileChooser fileChooser = new JFileChooser();
fileChooser.setDialogTitle("Select location to save QR");
fileChooser.setSelectedFile(new File(email + ".png"));


int userSelection = fileChooser.showSaveDialog(this);

if (userSelection == JFileChooser.APPROVE_OPTION) {
    File fileToSave = fileChooser.getSelectedFile();
    try {
       // java.nio.file.Files.write(fileToSave.toPath(),toByteArray());
        JOptionPane.showMessageDialog(this,"QR Code saved");
        
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this,"error", "eroor hard",JOptionPane.ERROR_MESSAGE);
    }
    // Now save to fileToSave
    System.out.println("Save as file: " + fileToSave.getAbsolutePath());
}

            
        } catch (Exception ex){
            JOptionPane.showMessageDialog(this,"Error saving QR code", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_savaAtQrActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
      
       
        DefaultTableModel model = (DefaultTableModel) userTable.getModel();
model.setRowCount(0); // Clears the table before adding new rows

try {
    Connection con = ConnectionProvider.getCon();
    Statement statement = con.createStatement();
    ResultSet resultSet = statement.executeQuery("SELECT * FROM userdetails");

    while (resultSet.next()) {
        model.addRow(new Object[]{
            resultSet.getString("id"),
            resultSet.getString("name"),
            resultSet.getString("gender"),
            resultSet.getString("email"),
            resultSet.getString("contact"),
            resultSet.getString("address"),
            resultSet.getString("state"),
            resultSet.getString("country"),
            resultSet.getString("uniqueregid"),
        
        });
    }

    // Optional: close resources if not handled elsewhere
    resultSet.close();
    statement.close();
    con.close();

} catch (Exception ex) {
    JOptionPane.showMessageDialog(null, "Something went wrong: " + ex.getMessage());
} 
    }//GEN-LAST:event_formComponentShown

    ByteArrayOutputStream out =null;
    String email = null;
    // Somewhere in your save button or action handler


    
    private void userTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userTableMouseClicked
       
       
        
     int index = userTable.getSelectedRow();
if (index != -1) {
    TableModel model = userTable.getModel();

    String id = model.getValueAt(index, 0).toString();
    String name = model.getValueAt(index, 1).toString();
    String email = model.getValueAt(index, 3).toString();
    String registrationId = model.getValueAt(index, 8).toString();

    Map<String, String> data = new HashMap<>();
    data.put("id", id);
    data.put("name", name);
    data.put("email", email);
    data.put("registrationId", registrationId);

    Gson gson = new Gson();
    String jsonData = gson.toJson(data);

    try {
        ByteArrayOutputStream out = QRCode.from(jsonData).withSize(322, 286).to(ImageType.PNG).stream();
        ByteArrayInputStream bis = new ByteArrayInputStream(out.toByteArray());
        Image image = ImageIO.read(bis);
        ImageIcon icon = new ImageIcon(image);

        lblImage.setIcon(icon); // This now works correctly
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error generating QR Code: " + ex.getMessage());
    }
}
 
        
    }//GEN-LAST:event_userTableMouseClicked

    //private ByteArrayOutputStream out = null;
//private String email = null;

    
    
    // Somewhere in your save button or action handler


    private void btnSaveQrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveQrActionPerformed
        /*
       Gson gson = new Gson();
        Map<String, String> data = new HashMap<>();
        data.put("email", email);
    String jsonData = gson.toJson(data);
    
        try {
            if(out== null ){
                JOptionPane.showMessageDialog(this, "No Qr Generate");
                return;
            }
            String defaultDir = BDUtility.getPath("qrCodes");
            File directory = new File(defaultDir);
            if(!directory.exists()) {
                directory.mkdirs();
            }
            //
            File defaultFile = new File(directory, email + ".jpg");
            try {
            java.nio.file.Files.write(defaultFile.toPath(), out.toByteArray() );
            
             ByteArrayOutputStream out = QRCode.from(jsonData).withSize(322, 286).to(ImageType.PNG).stream();
        ByteArrayInputStream bis = new ByteArrayInputStream(out.toByteArray());
        Image image = ImageIO.read(bis);
        ImageIcon icon = new ImageIcon(image);

        lblImage.setIcon(icon);

       
            JOptionPane.showMessageDialog(null, "QR Code saved Sucessfully!");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error Saving QR Code.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
        }catch (Exception ex){
           // JOptionPane.showMessageDialog(null, "Something Went wrong!");
            
        }
        */
        
        
      /*

         try {
        

        // Define file and path
        //String qrCodeData = email;
        String charset = "UTF-8";
        int width = 300;
        int height = 300;
        String format = "jpg";

        String defaultDir = BDUtility.getPath("qrCodes");
        File directory = new File(defaultDir);
        if (!directory.exists()) {
            directory.mkdirs();
        }

        // Generate QR code
        BitMatrix matrix = new MultiFormatWriter().encode(
                new String(email.getBytes(charset), charset),
                BarcodeFormat.QR_CODE, width, height);

        File qrFile = new File(directory, email + "." + format);
        Path path = FileSystems.getDefault().getPath(qrFile.getAbsolutePath());
        //MatrixToImageWriter.(matrix, format, path);

        JOptionPane.showMessageDialog(null, "QR Code saved successfully!");

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error generating or saving QR Code: " + ex.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
    }
        
        
        
        
        
        */
      int row = userTable.getSelectedRow();
if (row == -1) return;

// ✅ Assign email to class-level variable
email = userTable.getValueAt(row, 0).toString();

// ✅ Generate QR
Map<String, String> data = new HashMap<>();
data.put("email", email);
String json = new Gson().toJson(data);

try {
    out = QRCode.from(json).withSize(300, 300).to(ImageType.PNG).stream();

    ByteArrayInputStream bis = new ByteArrayInputStream(out.toByteArray());
    Image image = ImageIO.read(bis);
    lblImage.setIcon(new ImageIcon(image));  // Show QR preview
} catch (Exception ex) {
    JOptionPane.showMessageDialog(this, "Error generating QR: " + ex.getMessage());
}

      
if (out == null || email == null || email.trim().isEmpty()) {
    JOptionPane.showMessageDialog(this, "Please select an email first to generate QR.");
    return;
}

String userHome = System.getProperty("user.dir");
String folderPath = userHome  + File.separator + "qrCodes";
File directory = new File(folderPath);

if (!directory.exists() && !directory.mkdirs()) {
    JOptionPane.showMessageDialog(this, "Failed to create save directory.");
    return;
}

File outputFile = new File(directory, email + ".png");
try (FileOutputStream fos = new FileOutputStream(outputFile)) {
    fos.write(out.toByteArray());
    JOptionPane.showMessageDialog(this, "QR Code saved:\n" + outputFile.getAbsolutePath());
} catch (IOException ex) {
    JOptionPane.showMessageDialog(this, "Save error: " + ex.getMessage());
}

      
      
        
        
    }//GEN-LAST:event_btnSaveQrActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GenerateQr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GenerateQr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GenerateQr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GenerateQr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GenerateQr().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exitbtn;
    private javax.swing.JButton btnSaveQr;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblImage;
    private javax.swing.JButton savaAtQr;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables

    private static class txtEmail {

        public txtEmail() {
        }
    }
}
